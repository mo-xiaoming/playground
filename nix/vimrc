filetype plugin indent on

syntax on

set background=light

set encoding=utf-8

" Direct backup, swap and undo files away from $PWD. Use trailing '//' to
" ensure no filename conflict; Vim creates files where '%' is used in place of
" the directory separator.
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
" Create the above directories if needed
if !isdirectory(expand("~/.vim/backup"))
    call mkdir(expand("~/.vim/backup"), "p", 0700)
endif
if !isdirectory(expand("~/.vim/swap"))
    call mkdir(expand("~/.vim/swap"), "p", 0700)
endif
if !isdirectory(expand("~/.vim/undo"))
    call mkdir(expand("~/.vim/undo"), "p", 0700)
endif
set undofile
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" look for 'tags' in current directory and work up the tree towards root until
" one is found
set tags+=tags;/
set path+=**

set encoding=utf-8

"set wildmenu	" when tab'ing on the vim command line, a menu appear just above the command line
"set wildmode=list:longest,full
"set ruler	" show the cursor position all the time
set laststatus=2 "always show status bar/line
"set modeline " read modelines
" Better display for messages
"set cmdheight=2

set number
set signcolumn=yes

set showmode	" status line displays 'insert' or 'visual' when not in normal mode
set showcmd

match ErrorMsg '\s\+$'
" remove trailing whitespaces automatically
"autocmd BufWritePre * :%s/\s\+$//e

set shiftwidth=2 " shiftwidth, number of spaces for autoindent
set tabstop=2   " tabstop, number of spaces for tab character
set expandtab

set hlsearch    " highlight search. Turn off with :noh{lsearch}
set incsearch   " incremental search, i.e. search while typing
set ignorecase  " ignore case in searches
set smartcase   " only care about case if search word uses upper case (use with ignorecase)
set scrolloff=1 " lines of content shows above cursor

set showmatch

set splitbelow
set splitright

set confirm
set hidden

" This makes backspace behave like everyone expects it to. Needed on Windows
" and some Linux distros.
set backspace=indent,eol,start

" Use ripgrep if available (it's fast)
if executable("rg")
    set grepprg=rg\ --vimgrep
    set grepformat^=%f:%l:%c:%m
endif

" Bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" vimperator-like keyboard shortcuts for jumping to next/previous buffers
nmap <C-n> :bn<CR>
nmap <C-p> :bp<CR>

" Smart way to move between windows.
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

autocmd FileType haskell map <buffer> <F5> :update<CR>:!runghc %<CR>
autocmd FileType haskell setlocal sw=4 sts=4 expandtab
autocmd FileType python map <buffer> <F5> :update<CR>:!python %<CR>
autocmd FileType html setlocal sw=4 sts=4 expandtab
autocmd FileType xhtml setlocal sw=4 sts=4 expandtab
autocmd FileType nix setlocal sw=2 sts=2 expandtab iskeyword+=-
autocmd FileType sh setlocal sw=4 sts=4 expandtab

"""""""""""""" git-blame.nvim """""""""""""""
let g:gitblame_message_tempalte = '<summary> • <date> • <author>'
let g:gitblame_date_format = "%y-%m-%d %X"

"""""""""""""" coc """"""""""""""""""""

" You will have bad experience for diagnostic messages when it's default 4000.
"set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" Use `[c` and `]c` to navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

call coc#config('clangd', {
      \ 'semanticHighlighting': v:true,
      \ 'fallbackFlags': ["-std=gnu++17", "-Wall", "-Wextra", "-Wshadow"]
      \ })
call coc#config('coc.preferences', {
      \ 'extensionUpdateCheck': "daily",
      \ 'semanticTokensHighlights': v:false,
      \ })
